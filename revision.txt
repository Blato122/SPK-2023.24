https://docs.google.com/document/d/1JgPyF4BHNAP_4PiM1qJknzrd9mmHwvyliA2GBBcysV8/edit?usp=sharing

Do zrobienia było wyświetlenie daty i godziny na wyświetlaczu LCD, z tym, że godzina miała się zmieniać na bieżąco, dodatkowo zaimplementować możliwość zmiany godzin, minut i dnia poprzez przyciski (3 przyciski na wybór i 2 na zwiększ/zmniejsz), która opcja jest wybrana miało być sygnalizowane poprzez diody led i jeszcze w trybie zmiany tylko to co zwiekszamy/zmniejszamy miało być widoczne. Czas na wykonanie to 60min

===============================================================================================================

#include <LiquidCrystal.h>

LiquidCrystal lcd(0, 1, 2, 3, 4, 5); // LCD display initialization

//const byte start_button = PB1; // lub jakiś inny, który będzie dostępny!

const byte led_hours = 8;
const byte led_minutes = 9;
const byte led_days = 10;

const byte button_incr = 11;
const byte button_decr = 12;
const byte button_edit_hours = 13;
// reszta analogicznie

void setup() {
	// tutaj jest na odwrót, 1 to 0, a 0 to 1
	DDRA = 255; // port A ustawiony na wyjście - segmenty
	PORTA = 255; // początkowo nie zasilaj żadnego segmentu
	DDRB = 255; // port B ustawiony na wyjście - cyfry
	PORTB = 255; // początkowo nie zasilaj żadnej cyfry

    // set output pins for LED
    pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);

    // turn off LED
    digitalWrite(8, HIGH);
    digitalWrite(9, HIGH);
    digitalWrite(10, HIGH);

	lcd.begin(16, 2);

	//Serial.begin(9600); // 9600 - bits per sec - port szeregowy

	//pinMode(start_button, INPUT_PULLUP); // DLACZEGO INPUT I DLACZEGO PULLUP?
		// bo chyba input do procesora, output to by był np. wyświetlacz
		// a pullup to wytłumaczone w docs

    // set input pins for buttons
    pinMode(button_incr, INPUT_PULLUP);
    pinMode(button_decr, INPUT_PULLUP);
    pinMode(button_edit_hours, INPUT_PULLUP);

	TCNT0 = 0; // wartość licznika - rozumiem że to taki init, żeby mieć pewność, że jest tam 0 na początku?
	OCR0 = 0; // po dojściu licznika do tej wartości wykonane zostanie przerwanie => efektywna częstotliwość
		// zegara wynosi więc 8_000_000 Hz / 100 = 80_000 Hz
	TCCR0 = (1<<WGM01); // zaznaczenie, że korzystamy z przerwań COMP, a nie OVF
	TCCR0 |= (1<<CS01); // preskaler clk/8 => eketywna częstotliwość zegara to 80_000 Hz / 8 = 10_000 Hz
	TIMSK = (1<<TOIE0); // timer/Counter0 Overflow Interrupt Enable - ile tego włączania?!
		// i jeszcze ten OCIE0? no ale chyba OVF starczy, po co tu dodatkowo COMP?

	sei(); // włączenie przerwań w ogóle
}

// TO, CO SIĘ DA, pozmieniać np. na byte!
int i = 0;
int start = 7235959; // może nie w incie to..?
int digit = 0;
bool started = false;
bool seth = false;
// init to też w setup?

// COMP => przerwanie wywołane porównaniem wartości licznika z wartością w rejestrze OCR0
// 10000 przerwań na sekundę, więc po 10000 przerwaniach minie jedna sekunda i należy zaktualizować licznik
ISR(TIMER0_COMP_vect) {	
	if (started == true) {
		if ((++i) == 10000) {
			i = 0; // reset licznika przerwań
			start = decrement(start); // minęła sekunda
		}

		digit = (++digit) % 4;
		display_digit(start, digit); // no na segmentach to chyba niezbyt godziny i dni
		// display_number(start, seth);
	} else {
		digit = (++digit) % 4;
		display_digit(start, digit);
		// display_number(start, seth);
	}
}

void loop() {
	    // turning on hours programming - minuty i dni analogicznie!!!
    if (digitalRead(button_edit_hours) == LOW && seth == false)
    {
        // while (digitalRead(12) == LOW);
        digitalWrite(led_hours, LOW);
        // digitalWrite(10, HIGH);
        // busy = 1;
        seth = 1;
    }

    // turning off hours programming
    if (digitalRead(button_edit_hours) == LOW && seth == true)
    {
        // while (digitalRead(12) == LOW);
        digitalWrite(led_hours, HIGH);
        // busy = 0;
        seth = 0;
    }

	if (digitalRead(button_incr) == LOW && seth == true) {
		int hours = int( (num % 1000000) / 10000);
		if (hours < 23) start += 10000;
	} // else if?
	if (digitalRead(button_decr) == LOW && seth == true) {
		int hours = int( (num % 1000000) / 10000);
		if (hours > 0) start -= 10000;
	}
}

// jakieś delaye gdzieś? gdyby nie działało
// tu bez portu szeregowego - mozna uzywac portow D
// lcd wyświetlać a nie na segmenty chyba! (ale zostawić obie wersje jak coś)


















// -------------------------------

const byte A = 1 << 0; // top
const byte B = 1 << 1; // top right
const byte C = 1 << 2; // bottom right
const byte D = 1 << 3; // bottom
const byte E = 1 << 4; // bottom left
const byte F = 1 << 5; // top left
const byte G = 1 << 6; // middle
const byte H = 1 << 7; // dot

const byte number_segments[] = {
  A|B|C|D|E|F,    // 0
  B|C,            // 1
  A|B|G|E|D,      // 2
  A|B|G|C|D,      // 3
  F|G|B|C,        // 4
  A|F|G|C|D,      // 5
  A|F|E|D|C|G,    // 6
  A|B|C,          // 7
  A|B|C|D|E|F|G,  // 8
  A|F|G|B|C       // 9
};

struct Timer {
	int days;
  	int hours;
	int mins;
  	int secs;
};

struct Timer mins_secs(int num) {

	struct Timer t;
  
int days = int(num / 1000000);
int hours = int( (num % 1000000) / 10000);
int mins = int( (num % 10000) / 100 );
int secs = num % 100;

if (days > 6 || days < 0) {
	t.days = 0;
} else {t.days = days;}
if (hours > 23 || hours < 0) {
	t.hours = 0;
} else {t.hours = hours;}
if (mins > 59 || mins < 0) {
	t.mins = 0;
} else {t.mins = mins;}
if (secs > 59 || secs < 0) {
	t.secs = 0;
} else {t.secs = secs;}
	
	return t;
}

int four_digits(int days, int hours, int mins, int secs) {
  return 1000000 * days + 10000 * hours + 100 * mins + secs;
}

int decrement(int num) {
  struct Timer t = mins_secs(num);
  // Serial.println(mins, secs);
  if (t.secs > 0) {
    return four_digits(t.days, t.hours, t.mins, t.secs - 1);
  } else if (t.mins > 0 && t.secs == 0) {
    return four_digits(t.days, t.hours, t.mins - 1, 59);
  } else if (t.hours > 0 && t.mins == 0)
	return four_digits(t.days, t.hours - 1, 59, t.secs);
	} else if (t.days > 0 && t.hours == 0) {
	return four_digits(t.days - 1, 23, t.mins, t.secs);
else {
    return 0;
  }
}

void display_digit(int number, int digit) {
  const byte split_digits[] = {number % 10, (number / 10) % 10, (number / 100) % 10, number / 1000};

  byte segments = number_segments[split_digits[digit]];
     
  if (digit == 2) {
    segments |= H; // decimal point
  }
     
  PORTB = ~(1 << digit);
  PORTA = ~segments;
}

char *days = ["poniedzialek", "wtorek", "sroda", "czwartek", "piatek", "sobota", "niedziela"]

void display_number(int num, seth) {
int day = int(num / 1000000);
int hours = int( (num % 1000000) / 10000);
int mins = int( (num % 10000) / 100 );
int secs = num % 100;


  lcd.clear();
  lcd.setCursor(0, 0);    
  lcd.print(days[day]);  
  lcd.setCursor(0, 1); 

if (seth) {    
  lcd.print(hours); 
lcd.print(":");
} else {
     
  lcd.print(hours); 
lcd.print(":");
lcd.print(mins);
lcd.print(":");
lcd.print(secs);
}
